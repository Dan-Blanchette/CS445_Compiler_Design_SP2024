#DRBC Assign1 //rule 1
#DRBC AllProductionRules // rule2


char gameTitle[200];
bool goodGame, foreverLoop, badGame;

videoGamesGrader(char gradesList[], gradeType[]; int avgGradeTotal);


int main()
{
   static int size;
   char gradeTypes[6], grade;
   int iterator : 0, rating :0;
   int numGames[100];
   int posScore : 100;
   int videoGameRNG : ?10;
   int negScore : -100;
   int multScore : *100;
   

   while (max(numGames) == 100 and iterator !=100) do
   {
      iterator += 1;
      if (iterator % 10) then
      {
         goodGame = false;
      }

   }

   if (goodGame == true) then
   {
     grade = 'A';
     videoGamesGrader(grade);
     goodGame = true;
   }
   else
   {
     grade = 'F';
     videoGamesGrader(grade);
     goodGame = false;
   }

// in class rule 19 and 20
    for i=0 to 10 do {
        for j=0 to 10 by 2 do
            if(goodGame == true) then grade += 10;
            else while(badGame == true) do
                    if(goodGame != true) then grade -= 10;
        break;
    }

    // matched
    while(goodGame == true) do {
        if(badGame == false) then {
            grade += 100;
            grade *= 1;
            grade /= 1;
        }
    }

   foreverLoop = true;

   if (foreverLoop == true or foreverLoop == false) then {return true;}
   while (foreverLoop == true) do
   {
      int simpleGradeMath : 0;
      simpleGradeMath + 1;
      simpleGradeMath * 1;
      simpleGradeMath / 1;
      simpleGradeMath - 1;
      y = 1 :<: 10;
      if (simpleMath < 1 ) then
      {
         x = 10 :>: 1;
         x--;
         x++;
         break;
      }
   }

   while (goodGame == false) do
   {
      int z : 1;
      if ( goodGame != true) then {rating = 0;}
      z = not (10 :>: 1);
      if (z <= 1) then goodGame = false;
      if (z >= 10) then badGame = false;
      if (z > 10) then goodGame = false;

      return ;
   }

   return 0;
}
